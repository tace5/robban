#define TURNING_SPEED 50 
#define TURNING_WHEEL_RADIUS 11.3*2*PI
#define TURNING_WHEEL_DIAMETER 5.6*PI
#define TURNING_360 360*4.03571428571
#define TURNING_90 360*(4.03571428571/4)

void WallMan();
void Rotate(int direction, int angle);
int Sensor_GetClosestObject();

task main() {
  /* Setup of sensors */
  SetSensorUltrasonic(S1);
  /* Lock C motor in place, see documentation for each parameter */
  SetOutput(OUT_C, Power, 0,
                   OutputMode,  OUT_MODE_BRAKE + OUT_MODE_MOTORON + OUT_MODE_REGULATED,
                   RegMode,     OUT_REGMODE_SPEED,
                   RunState,    OUT_RUNSTATE_RUNNING,
                   UpdateFlags, UF_UPDATE_MODE + UF_UPDATE_SPEED);
  Wait(10000);
  WallMan();
  Rotate(1, TURNING_90);
  RotateMotorEx(OUT_AB, 100, 360*11.5682102208, 0, true, true);
  RotateMotor(OUT_C, -40, 60);
}

/* Reorient robot to face wall. */
safecall void WallMan() {
  int closest_point = Sensor_GetClosestObject();
  int distance;
  Wait(3000); 
  OnFwd(OUT_A, TURNING_SPEED);
  while (true) {
    distance = SensorUS(S1); /* Get value of ultrasonic reader */
    NumOut(0, LCD_LINE2, distance);
    if (distance <= closest_point + 1) {
      //closest_point = distance;
      Off(OUT_A);
      break;
    }
    NumOut(0, LCD_LINE3, closest_point); 
    Wait(MS_20);
    ClearScreen();
  }
}

safecall int Sensor_GetClosestObject() {
  int closest_object = SensorUS(S1);
  int i = 0;
  ResetRotationCount(OUT_A);
  OnFwd(OUT_A, TURNING_SPEED);
  while (MotorRotationCount(OUT_A) <= TURNING_360) {
    NumOut(0, LCD_LINE2, MotorRotationCount(OUT_A));
    if (SensorUS(S1) < closest_object) {
      closest_object = SensorUS(S1); 
    }
    i++;
    Wait(MS_20);
  }
  Off(OUT_A);
  return closest_object;
}

safecall void Rotate(int direction, int angle) {
  ResetRotationCount(OUT_A);
  OnFwd(OUT_A, TURNING_SPEED*direction);
  while (MotorRotationCount(OUT_A) <= angle);
  Off(OUT_A);
}
