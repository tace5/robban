#define TURNING_SPEED 80 
#define TURNING_ROBOT_DIAMETER 11.25
#define TURNING_WHEEL_DIAMETER 5.6
#define TURNING_360 (360*(TURNING_ROBOT_DIAMETER/TURNING_WHEEL_DIAMETER))
#define TURNING_90 TURNING_360/4
#define MOVE_100CM (360*5.68410511042)

safecall void WallMan();
safecall void Movement_Distance(int distance);                                  

safecall void Movement_Rotate(int direction, int angle);
safecall int Sensor_GetClosestObject();

task main() {
  /* Setup of sensors */
  SetSensorUltrasonic(S1);
  /* Lock C motor in place, see documentation for each parameter */
  SetOutput(OUT_C, Power, 0,
                   OutputMode,  OUT_MODE_BRAKE + OUT_MODE_MOTORON + OUT_MODE_REGULATED,
                   RegMode,     OUT_REGMODE_SPEED,
                   RunState,    OUT_RUNSTATE_RUNNING,
                   UpdateFlags, UF_UPDATE_MODE + UF_UPDATE_SPEED);
  WallMan();
  Movement_Rotate(1, TURNING_90);
  RotateMotorEx(OUT_AB, 70, MOVE_100CM*1, 0, true, true);
  Movement_Rotate(-1, TURNING_90+10);
  Movement_Distance(30);
  

  // Drop book
  RotateMotor(OUT_C, -40, 80);
  //PlayFileEx("noice_1.rso", 4, false);
  Wait(3000);
  RotateMotor(OUT_C, 40, 80);
  
  Movement_Rotate(-1, TURNING_90+10);
  RotateMotorEx(OUT_AB, 70, MOVE_100CM*1, 0, true, true);
  Wait(1000);
  WallMan();
  Wait(1000);
  Movement_Distance(50);
}
safecall void Movement_Distance(int distance) {
  RotateMotor(OUT_AB, 70, 360*((SensorUS(S1)-distance)/(5.6*PI)));
}

/* Reorient robot to face wall. */
safecall void WallMan() {
  int closest_point = Sensor_GetClosestObject();
  int distance = 255;
  OnFwd(OUT_A, TURNING_SPEED);
  while (true) {
    distance = SensorUS(S1);
    NumOut(0, LCD_LINE2, distance);
    if (distance-1 <= closest_point) {
      Off(OUT_A);
      break;
    }
    NumOut(0, LCD_LINE3, closest_point); 
    Wait(MS_10);
    ClearScreen();
  }
}

safecall int Sensor_GetClosestObject() {
  int closest_object = (SensorUS(S1) == 0) ? 255 : SensorUS(S1);
  int initial_rotor_count = MotorRotationCount(OUT_A); 
  NumOut(0, LCD_LINE6, MotorRotationCount(OUT_A)); 
  OnFwd(OUT_A, TURNING_SPEED);
  while (abs(MotorRotationCount(OUT_A)-initial_rotor_count) <= TURNING_360) {
    NumOut(0, LCD_LINE2, MotorRotationCount(OUT_A));
    if (SensorUS(S1) < closest_object) {
      closest_object = SensorUS(S1); 
    }
    Wait(MS_10);
  }
  Off(OUT_A);
  return closest_object;
}

safecall void Movement_Rotate(int direction, int angle) {
  /* int initial_rotor_count = MotorRotationCount(OUT_A);
  OnFwd(OUT_A, TURNING_SPEED*direction);
  while (abs(MotorRotationCount(OUT_A)-initial_rotor_count) <= angle);
  Off(OUT_A); */
  if (direction < 0) {
    //angle += 1;
  } 
  RotateMotorEx(OUT_AB, TURNING_SPEED, angle, -100*direction, true, true);
  Wait(1500);
}
